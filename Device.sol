pragma solidity >=0.7.0 <0.9.0;

import "./Domain.sol";

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/ECDSA.sol";

contract Device {
    // Future public key once the device is registered
    address private owner;
    // Hash generated by front end for registeration purposes
    bytes32 private hash;
    // Index within the parent contract
    uint256 index;
    
    // Parent Contract reference
    Domain parentContract;
    
    constructor(Domain _parentContract, uint256 _index, bytes32 _hash) {
        parentContract = _parentContract;
        index = _index;
        hash = _hash;
    }
    
    event DeviceRegistered(address indexed _device, address indexed _account);

    /**
     * Register the public key address by verifying the signature generated
     * offchain.
     **/
    function register(address _publicKey, bytes memory _signature) public {
        // TODO: VALIDATE SIGNATURE AND ASSIGN TO publicKey variable
        
        emit DeviceRegistered(address(this), address(owner));
    }
}
